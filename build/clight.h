/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -m -i /home/matteo/local/clight-gui/src/class/DBusTypes.h -p clight /home/matteo/local/clight-gui/src/dbus/clight/clight.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CLIGHT_H
#define CLIGHT_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "/home/matteo/local/clight-gui/src/class/DBusTypes.h"

/*
 * Proxy class for interface org.clight.clight
 */
class OrgClightClightInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.clight.clight"; }

public:
    OrgClightClightInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgClightClightInterface();

    Q_PROPERTY(int AcState READ acState)
    inline int acState() const
    { return qvariant_cast< int >(property("AcState")); }

    Q_PROPERTY(double AmbientBr READ ambientBr)
    inline double ambientBr() const
    { return qvariant_cast< double >(property("AmbientBr")); }

    Q_PROPERTY(double BlPct READ blPct)
    inline double blPct() const
    { return qvariant_cast< double >(property("BlPct")); }

    Q_PROPERTY(QString ClightdVersion READ clightdVersion)
    inline QString clightdVersion() const
    { return qvariant_cast< QString >(property("ClightdVersion")); }

    Q_PROPERTY(int DayTime READ dayTime)
    inline int dayTime() const
    { return qvariant_cast< int >(property("DayTime")); }

    Q_PROPERTY(int DisplayState READ displayState)
    inline int displayState() const
    { return qvariant_cast< int >(property("DisplayState")); }

    Q_PROPERTY(bool InEvent READ inEvent)
    inline bool inEvent() const
    { return qvariant_cast< bool >(property("InEvent")); }

    Q_PROPERTY(bool Inhibited READ inhibited)
    inline bool inhibited() const
    { return qvariant_cast< bool >(property("Inhibited")); }

    Q_PROPERTY(double KbdPct READ kbdPct)
    inline double kbdPct() const
    { return qvariant_cast< double >(property("KbdPct")); }

    Q_PROPERTY(int LidState READ lidState)
    inline int lidState() const
    { return qvariant_cast< int >(property("LidState")); }

    Q_PROPERTY(Coordinate Location READ location)
    inline Coordinate location() const
    { return qvariant_cast< Coordinate >(property("Location")); }

    Q_PROPERTY(int NextEvent READ nextEvent)
    inline int nextEvent() const
    { return qvariant_cast< int >(property("NextEvent")); }

    Q_PROPERTY(bool PmInhibited READ pmInhibited)
    inline bool pmInhibited() const
    { return qvariant_cast< bool >(property("PmInhibited")); }

    Q_PROPERTY(double ScreenComp READ screenComp)
    inline double screenComp() const
    { return qvariant_cast< double >(property("ScreenComp")); }

    Q_PROPERTY(bool SensorAvail READ sensorAvail)
    inline bool sensorAvail() const
    { return qvariant_cast< bool >(property("SensorAvail")); }

    Q_PROPERTY(qulonglong Sunrise READ sunrise)
    inline qulonglong sunrise() const
    { return qvariant_cast< qulonglong >(property("Sunrise")); }

    Q_PROPERTY(qulonglong Sunset READ sunset)
    inline qulonglong sunset() const
    { return qvariant_cast< qulonglong >(property("Sunset")); }

    Q_PROPERTY(bool Suspended READ suspended)
    inline bool suspended() const
    { return qvariant_cast< bool >(property("Suspended")); }

    Q_PROPERTY(int Temp READ temp)
    inline int temp() const
    { return qvariant_cast< int >(property("Temp")); }

    Q_PROPERTY(QString Version READ version)
    inline QString version() const
    { return qvariant_cast< QString >(property("Version")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Capture(bool in0, bool in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("Capture"), argumentList);
    }

    inline QDBusPendingReply<> DecBl(double in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DecBl"), argumentList);
    }

    inline QDBusPendingReply<> IncBl(double in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IncBl"), argumentList);
    }

    inline QDBusPendingReply<> Inhibit(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Inhibit"), argumentList);
    }

    inline QDBusPendingReply<> Load(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Load"), argumentList);
    }

    inline QDBusPendingReply<> Pause(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Pause"), argumentList);
    }

    inline QDBusPendingReply<> Unload(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Unload"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
