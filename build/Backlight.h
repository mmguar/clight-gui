/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -m -i /home/matteo/local/clight-gui/src/class/DBusTypes.h -p Backlight /home/matteo/local/clight-gui/src/dbus/clight/Backlight.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef BACKLIGHT_H
#define BACKLIGHT_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "/home/matteo/local/clight-gui/src/class/DBusTypes.h"

/*
 * Proxy class for interface org.clight.clight.Conf.Backlight
 */
class OrgClightClightConfBacklightInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.clight.clight.Conf.Backlight"; }

public:
    OrgClightClightConfBacklightInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgClightClightConfBacklightInterface();

    Q_PROPERTY(int AcDayTimeout READ acDayTimeout WRITE setAcDayTimeout)
    inline int acDayTimeout() const
    { return qvariant_cast< int >(property("AcDayTimeout")); }
    inline void setAcDayTimeout(int value)
    { setProperty("AcDayTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(int AcEventTimeout READ acEventTimeout WRITE setAcEventTimeout)
    inline int acEventTimeout() const
    { return qvariant_cast< int >(property("AcEventTimeout")); }
    inline void setAcEventTimeout(int value)
    { setProperty("AcEventTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(int AcNightTimeout READ acNightTimeout WRITE setAcNightTimeout)
    inline int acNightTimeout() const
    { return qvariant_cast< int >(property("AcNightTimeout")); }
    inline void setAcNightTimeout(int value)
    { setProperty("AcNightTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(int BattDayTimeout READ battDayTimeout WRITE setBattDayTimeout)
    inline int battDayTimeout() const
    { return qvariant_cast< int >(property("BattDayTimeout")); }
    inline void setBattDayTimeout(int value)
    { setProperty("BattDayTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(int BattEventTimeout READ battEventTimeout WRITE setBattEventTimeout)
    inline int battEventTimeout() const
    { return qvariant_cast< int >(property("BattEventTimeout")); }
    inline void setBattEventTimeout(int value)
    { setProperty("BattEventTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(int BattNightTimeout READ battNightTimeout WRITE setBattNightTimeout)
    inline int battNightTimeout() const
    { return qvariant_cast< int >(property("BattNightTimeout")); }
    inline void setBattNightTimeout(int value)
    { setProperty("BattNightTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(bool CaptureOnLidOpened READ captureOnLidOpened WRITE setCaptureOnLidOpened)
    inline bool captureOnLidOpened() const
    { return qvariant_cast< bool >(property("CaptureOnLidOpened")); }
    inline void setCaptureOnLidOpened(bool value)
    { setProperty("CaptureOnLidOpened", QVariant::fromValue(value)); }

    Q_PROPERTY(bool InhibitOnLidClosed READ inhibitOnLidClosed WRITE setInhibitOnLidClosed)
    inline bool inhibitOnLidClosed() const
    { return qvariant_cast< bool >(property("InhibitOnLidClosed")); }
    inline void setInhibitOnLidClosed(bool value)
    { setProperty("InhibitOnLidClosed", QVariant::fromValue(value)); }

    Q_PROPERTY(bool NoAutoCalib READ noAutoCalib WRITE setNoAutoCalib)
    inline bool noAutoCalib() const
    { return qvariant_cast< bool >(property("NoAutoCalib")); }
    inline void setNoAutoCalib(bool value)
    { setProperty("NoAutoCalib", QVariant::fromValue(value)); }

    Q_PROPERTY(bool NoSmooth READ noSmooth WRITE setNoSmooth)
    inline bool noSmooth() const
    { return qvariant_cast< bool >(property("NoSmooth")); }
    inline void setNoSmooth(bool value)
    { setProperty("NoSmooth", QVariant::fromValue(value)); }

    Q_PROPERTY(bool RestoreOnExit READ restoreOnExit WRITE setRestoreOnExit)
    inline bool restoreOnExit() const
    { return qvariant_cast< bool >(property("RestoreOnExit")); }
    inline void setRestoreOnExit(bool value)
    { setProperty("RestoreOnExit", QVariant::fromValue(value)); }

    Q_PROPERTY(double ShutterThreshold READ shutterThreshold WRITE setShutterThreshold)
    inline double shutterThreshold() const
    { return qvariant_cast< double >(property("ShutterThreshold")); }
    inline void setShutterThreshold(double value)
    { setProperty("ShutterThreshold", QVariant::fromValue(value)); }

    Q_PROPERTY(bool TimeoutsInMs READ timeoutsInMs)
    inline bool timeoutsInMs() const
    { return qvariant_cast< bool >(property("TimeoutsInMs")); }

    Q_PROPERTY(int TransDuration READ transDuration WRITE setTransDuration)
    inline int transDuration() const
    { return qvariant_cast< int >(property("TransDuration")); }
    inline void setTransDuration(int value)
    { setProperty("TransDuration", QVariant::fromValue(value)); }

    Q_PROPERTY(double TransStep READ transStep WRITE setTransStep)
    inline double transStep() const
    { return qvariant_cast< double >(property("TransStep")); }
    inline void setTransStep(double value)
    { setProperty("TransStep", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
};

#endif
