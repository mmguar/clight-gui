/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -m -i /home/matteo/local/clight-gui/src/class/DBusTypes.h -p Gamma /home/matteo/local/clight-gui/src/dbus/clight/Gamma.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef GAMMA_H
#define GAMMA_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "/home/matteo/local/clight-gui/src/class/DBusTypes.h"

/*
 * Proxy class for interface org.clight.clight.Conf.Gamma
 */
class OrgClightClightConfGammaInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.clight.clight.Conf.Gamma"; }

public:
    OrgClightClightConfGammaInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgClightClightConfGammaInterface();

    Q_PROPERTY(bool AmbientGamma READ ambientGamma WRITE setAmbientGamma)
    inline bool ambientGamma() const
    { return qvariant_cast< bool >(property("AmbientGamma")); }
    inline void setAmbientGamma(bool value)
    { setProperty("AmbientGamma", QVariant::fromValue(value)); }

    Q_PROPERTY(int DayTemp READ dayTemp WRITE setDayTemp)
    inline int dayTemp() const
    { return qvariant_cast< int >(property("DayTemp")); }
    inline void setDayTemp(int value)
    { setProperty("DayTemp", QVariant::fromValue(value)); }

    Q_PROPERTY(bool LongTransition READ longTransition WRITE setLongTransition)
    inline bool longTransition() const
    { return qvariant_cast< bool >(property("LongTransition")); }
    inline void setLongTransition(bool value)
    { setProperty("LongTransition", QVariant::fromValue(value)); }

    Q_PROPERTY(int NightTemp READ nightTemp WRITE setNightTemp)
    inline int nightTemp() const
    { return qvariant_cast< int >(property("NightTemp")); }
    inline void setNightTemp(int value)
    { setProperty("NightTemp", QVariant::fromValue(value)); }

    Q_PROPERTY(bool NoSmooth READ noSmooth WRITE setNoSmooth)
    inline bool noSmooth() const
    { return qvariant_cast< bool >(property("NoSmooth")); }
    inline void setNoSmooth(bool value)
    { setProperty("NoSmooth", QVariant::fromValue(value)); }

    Q_PROPERTY(int TransDuration READ transDuration WRITE setTransDuration)
    inline int transDuration() const
    { return qvariant_cast< int >(property("TransDuration")); }
    inline void setTransDuration(int value)
    { setProperty("TransDuration", QVariant::fromValue(value)); }

    Q_PROPERTY(int TransStep READ transStep WRITE setTransStep)
    inline int transStep() const
    { return qvariant_cast< int >(property("TransStep")); }
    inline void setTransStep(int value)
    { setProperty("TransStep", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
};

#endif
