/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -m -i /home/matteo/local/clight-gui/src/class/DBusTypes.h -p Daytime /home/matteo/local/clight-gui/src/dbus/clight/Daytime.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DAYTIME_H
#define DAYTIME_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "/home/matteo/local/clight-gui/src/class/DBusTypes.h"

/*
 * Proxy class for interface org.clight.clight.Conf.Daytime
 */
class OrgClightClightConfDaytimeInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.clight.clight.Conf.Daytime"; }

public:
    OrgClightClightConfDaytimeInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgClightClightConfDaytimeInterface();

    Q_PROPERTY(int EventDuration READ eventDuration WRITE setEventDuration)
    inline int eventDuration() const
    { return qvariant_cast< int >(property("EventDuration")); }
    inline void setEventDuration(int value)
    { setProperty("EventDuration", QVariant::fromValue(value)); }

    Q_PROPERTY(Coordinate Location READ location WRITE setLocation)
    inline Coordinate location() const
    { return qvariant_cast< Coordinate >(property("Location")); }
    inline void setLocation(Coordinate value)
    { setProperty("Location", QVariant::fromValue(value)); }

    Q_PROPERTY(QString Sunrise READ sunrise WRITE setSunrise)
    inline QString sunrise() const
    { return qvariant_cast< QString >(property("Sunrise")); }
    inline void setSunrise(const QString &value)
    { setProperty("Sunrise", QVariant::fromValue(value)); }

    Q_PROPERTY(int SunriseOffset READ sunriseOffset WRITE setSunriseOffset)
    inline int sunriseOffset() const
    { return qvariant_cast< int >(property("SunriseOffset")); }
    inline void setSunriseOffset(int value)
    { setProperty("SunriseOffset", QVariant::fromValue(value)); }

    Q_PROPERTY(QString Sunset READ sunset WRITE setSunset)
    inline QString sunset() const
    { return qvariant_cast< QString >(property("Sunset")); }
    inline void setSunset(const QString &value)
    { setProperty("Sunset", QVariant::fromValue(value)); }

    Q_PROPERTY(int SunsetOffset READ sunsetOffset WRITE setSunsetOffset)
    inline int sunsetOffset() const
    { return qvariant_cast< int >(property("SunsetOffset")); }
    inline void setSunsetOffset(int value)
    { setProperty("SunsetOffset", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
};

#endif
