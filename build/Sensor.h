/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -m -i /home/matteo/local/clight-gui/src/class/DBusTypes.h -p Sensor /home/matteo/local/clight-gui/src/dbus/clight/Sensor.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SENSOR_H
#define SENSOR_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "/home/matteo/local/clight-gui/src/class/DBusTypes.h"

/*
 * Proxy class for interface org.clight.clight.Conf.Sensor
 */
class OrgClightClightConfSensorInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.clight.clight.Conf.Sensor"; }

public:
    OrgClightClightConfSensorInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgClightClightConfSensorInterface();

    Q_PROPERTY(int AcCaptures READ acCaptures WRITE setAcCaptures)
    inline int acCaptures() const
    { return qvariant_cast< int >(property("AcCaptures")); }
    inline void setAcCaptures(int value)
    { setProperty("AcCaptures", QVariant::fromValue(value)); }

    Q_PROPERTY(SensorFrames AcPoints READ acPoints WRITE setAcPoints)
    inline SensorFrames acPoints() const
    { return qvariant_cast< SensorFrames >(property("AcPoints")); }
    inline void setAcPoints(SensorFrames value)
    { setProperty("AcPoints", QVariant::fromValue(value)); }

    Q_PROPERTY(int BattCaptures READ battCaptures WRITE setBattCaptures)
    inline int battCaptures() const
    { return qvariant_cast< int >(property("BattCaptures")); }
    inline void setBattCaptures(int value)
    { setProperty("BattCaptures", QVariant::fromValue(value)); }

    Q_PROPERTY(SensorFrames BattPoints READ battPoints WRITE setBattPoints)
    inline SensorFrames battPoints() const
    { return qvariant_cast< SensorFrames >(property("BattPoints")); }
    inline void setBattPoints(SensorFrames value)
    { setProperty("BattPoints", QVariant::fromValue(value)); }

    Q_PROPERTY(QString Device READ device WRITE setDevice)
    inline QString device() const
    { return qvariant_cast< QString >(property("Device")); }
    inline void setDevice(const QString &value)
    { setProperty("Device", QVariant::fromValue(value)); }

    Q_PROPERTY(QString Settings READ settings WRITE setSettings)
    inline QString settings() const
    { return qvariant_cast< QString >(property("Settings")); }
    inline void setSettings(const QString &value)
    { setProperty("Settings", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
};

#endif
